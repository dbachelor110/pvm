#!/usr/bin/env bash
set -e

PVM_HOME="${HOME}/.pvm"
VERSIONS_DIR="$PVM_HOME/versions"
BIN_DIR="$PVM_HOME/bin"
CURRENT_FILE="$PVM_HOME/current"

mkdir -p "$VERSIONS_DIR" "$BIN_DIR"

function help() {
    cat <<EOF
Podman Version Manager for PHP

Usage:
  pvm register <version> [path] Register a custom PHP image from Dockerfile or Containerfile
                                - <version>: version tag to register
                                - [path]: optional path to Dockerfile or Containerfile
                                  Defaults to current directory, Containerfile preferred
  pvm install <version>         Install PHP version
  pvm uninstall <version>       Uninstall PHP version
  pvm use <version>             Use PHP version in current shell
  pvm exec <version> ...        Execute command in specified PHP version
  pvm ls                        List installed PHP versions
  pvm current                   Show current PHP version
  pvm auto                      Auto-use version from .pvmrc or .php-version
  pvm help                      Show this help
EOF
}

function install_php() {
    local version="$1"
    if [ -z "$version" ]; then
        echo "Please specify a version, e.g., pvm install 8.3"
        exit 1
    fi

    local image
    image=$(get_image_name "$version")

    if [[ "$image" == docker.io/library/php:* ]]; then
        echo "Pulling $image..."
        podman pull "$image"
    else
        echo "Using custom image $image, skipping pull"
    fi

    mkdir -p "$VERSIONS_DIR/$version"
    echo "installed" > "$VERSIONS_DIR/$version/status"
    echo "$image" > "$VERSIONS_DIR/$version/image"
    echo "PHP $version installed (image: $image)."
}

function uninstall_php() {
    local version="$1"
    if [ -z "$version" ]; then
        echo "Please specify a version"
        exit 1
    fi

    echo "Removing PHP version $version..."

    # 移除版本目錄
    rm -rf "$VERSIONS_DIR/$version"

    # 移除 custom_images 記錄
    local custom_images_file="$PVM_HOME/custom_images"
    if [ -f "$custom_images_file" ]; then
        grep -v "^$version=" "$custom_images_file" > "$custom_images_file.tmp" || true
        mv "$custom_images_file.tmp" "$custom_images_file"
        echo "Removed custom image registration for version $version"
    fi

    # 嘗試移除自訂 image
    local image=""
    if [ -f "$VERSIONS_DIR/$version/image" ]; then
        image=$(cat "$VERSIONS_DIR/$version/image")
        echo "Removing image $image ..."
        podman rmi -f "$image" || true
    fi

    echo "PHP $version uninstalled."
}

function register_php() {
    local version="$1"
    local dockerfile_path="$2"

    if [ -z "$version" ]; then
        echo "Usage: pvm register <version> [dockerfile_path]"
        exit 1
    fi

    # 預設路徑：Containerfile > Dockerfile
    if [ -z "$dockerfile_path" ]; then
        if [ -f "./Containerfile" ]; then
            dockerfile_path="./Containerfile"
        elif [ -f "./Dockerfile" ]; then
            dockerfile_path="./Dockerfile"
        else
            echo "No Dockerfile or Containerfile found in current directory."
            exit 1
        fi
    fi

    if [ ! -f "$dockerfile_path" ]; then
        echo "Specified Dockerfile not found: $dockerfile_path"
        exit 1
    fi

    local image_name="pvm-custom:$version"

    echo "Building image $image_name from $dockerfile_path ..."
    podman build -t "$image_name" -f "$dockerfile_path" .

    # 建置成功後，寫入 custom_images 映射
    mkdir -p "$PVM_HOME"
    local custom_images_file="$PVM_HOME/custom_images"

    # 如果已存在該版本，先刪除舊紀錄
    if [ -f "$custom_images_file" ]; then
        grep -v "^$version=" "$custom_images_file" > "$custom_images_file.tmp" || true
        mv "$custom_images_file.tmp" "$custom_images_file"
    fi

    echo "$version=$image_name" >> "$custom_images_file"

    # 同時在版本目錄建立標記
    mkdir -p "$VERSIONS_DIR/$version"
    echo "installed" > "$VERSIONS_DIR/$version/status"
    echo "$image_name" > "$VERSIONS_DIR/$version/image"

    echo "Registered custom PHP image for version $version: $image_name"
}

function get_image_name() {
    local version="$1"
    if [ -f "$PVM_HOME/custom_images" ]; then
        local image=$(grep "^$version=" "$PVM_HOME/custom_images" | cut -d '=' -f2)
        if [ -n "$image" ]; then
            echo "$image"
            return 0
        fi
    fi
    echo "docker.io/library/php:${version}-cli"
}


function use_php() {
    local version="$1"
    if [ -z "$version" ]; then
        echo "Please specify a version"
        exit 1
    fi
    if [ ! -d "$VERSIONS_DIR/$version" ]; then
        echo "Version $version is not installed."
        exit 1
    fi

    echo "$version" > "$CURRENT_FILE"

    cat > "$BIN_DIR/php" <<EOF
#!/usr/bin/env bash
pvm exec "$version" php "\$@"
EOF
    chmod +x "$BIN_DIR/php"

    local image=$(get_image_name "$version")
    echo "Now using PHP $version (image: $image)"
    echo "Run: export PATH=\"$BIN_DIR:\$PATH\" to use it"
}

function exec_php() {
    local version="$1"
    shift
    if [ -z "$version" ]; then
        echo "Please specify a version"
        exit 1
    fi
    if [ ! -d "$VERSIONS_DIR/$version" ]; then
        echo "Version $version is not installed."
        exit 1
    fi

    podman run --rm -it -v "$(pwd):/app" -w /app php:${version}-cli "$@"
}

function list_php() {
    echo "Installed PHP versions:"
    for dir in "$VERSIONS_DIR"/*; do
        [ -d "$dir" ] || continue
        ver=$(basename "$dir")
        if [ -f "$CURRENT_FILE" ] && [ "$ver" = "$(cat "$CURRENT_FILE")" ]; then
            echo "-> $ver"
        else
            echo "   $ver"
        fi
    done
}

function current_php() {
    if [ -f "$CURRENT_FILE" ]; then
        echo "Current PHP version: $(cat "$CURRENT_FILE")"
    else
        echo "No version in use."
    fi
}

function auto_php() {
    local version_file=""
    if [ -f ".pvmrc" ]; then
        version_file=".pvmrc"
    elif [ -f ".php-version" ]; then
        version_file=".php-version"
    fi

    if [ -n "$version_file" ]; then
        local version
        version=$(cat "$version_file" | tr -d '[:space:]')
        if [ -n "$version" ]; then
            pvm use "$version" >/dev/null 2>&1 || echo "Version $version not installed"
        fi
    fi
}

case "$1" in
    register) shift; register_php "$@" ;;
    install) shift; install_php "$@" ;;
    uninstall) shift; uninstall_php "$@" ;;
    use) shift; use_php "$@" ;;
    exec) shift; exec_php "$@" ;;
    ls) list_php ;;
    current) current_php ;;
    auto) auto_php ;;
    help|--help|-h|"") help ;;
    *) echo "Unknown command: $1"; help; exit 1 ;;
esac
